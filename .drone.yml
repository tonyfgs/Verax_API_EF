kind: pipeline
type: docker
name: CI
 
trigger:
  event:
    - push

steps:
  - name: build
    image: mcr.microsoft.com/dotnet/sdk:8.0
    commands:
      - cd Verax_API_EF
      - cd Verax_API_EF
      - dotnet restore Verax_API_EF.sln
      - dotnet build Verax_API_EF.sln -c Release --no-restore
      - dotnet publish Verax_API_EF.sln -c Release --no-restore -o $CI_PROJECT_DIR/build/release

  - name: tests
    image: mcr.microsoft.com/dotnet/sdk:8.0
    commands:
      - cd Verax_API_EF
      - cd Verax_API_EF
      - dotnet restore Verax_API_EF.sln
      - dotnet test Verax_API_EF.sln --no-restore
    depends_on: [build]

  - name: code-inspection
    image: hub.codefirst.iut.uca.fr/marc.chevaldonne/codefirst-dronesonarplugin-dotnet8
    secrets: [ SECRET_SONAR_LOGIN ]
    environment:
      sonar_host: https://codefirst.iut.uca.fr/sonar/
      sonar_token:
        from_secret: SECRET_SONAR_LOGIN
      project_key: Verax_API_EF
      coverage_exclusions: "TestsUnitaires/**"
    commands:
      - cd Verax_API_EF/
      - cd Verax_API_EF/
      - dotnet restore Verax_API_EF.sln
      - dotnet sonarscanner begin /k:$${project_key} /d:sonar.host.url=$${sonar_host} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions=$${coverage_exclusions} /d:sonar.login=$${sonar_token} 
      - dotnet build Verax_API_EF.sln -c Release --no-restore
      - dotnet test Verax_API_EF.sln --logger trx --no-restore
      - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
      - dotnet publish Verax_API_EF.sln -c Release --no-restore -o $CI_PROJECT_DIR/build/release
      - dotnet sonarscanner end /d:sonar.login=$${sonar_token}
    when:
      branch:
        - master
      event:
        - push
        - pull_request
    depends_on: [build,tests]